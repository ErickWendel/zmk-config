/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        holdtolayer: holdtolayer {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDTOLAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <1000>;
        };

        holdortap: holdortap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDORTAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <1000>;
        };

        layer1or4: layer1or4 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER1OR4";
            #binding-cells = <0>;
            bindings = <&mo 1>, <&mo 4>;
        };

        shiftorcaps: shiftorcaps {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFTORCAPS";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
    };

    macros {
        exitterm: exitterm {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp X &kp I &kp T &kp RET>;
            label = "EXITTERM";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB       &kp Q  &kp W  &kp E     &kp R  &kp T        &kp Y    &kp U       &kp I      &kp O    &kp P                       &kp BSPC
&kp LCTRL     &kp A  &kp S  &kp D     &kp F  &kp G        &kp H    &kp J       &kp K      &kp L    &kp SEMI                    &kp SQT
&shiftorcaps  &kp Z  &kp X  &kp C     &kp V  &kp B        &kp N    &kp M       &kp COMMA  &kp DOT  &holdortap BACKSLASH SLASH  &kp ESC
                            &kp LGUI  &mo 3  &kp SPACE    &kp RET  &layer1or4  &mo 2
            >;
        };

        numLayer {
            bindings = <
&trans  &kp LBKT      &kp N7  &kp N8   &kp N9  &kp RBKT     &kp K_MUTE     &kp LG(MINUS)  &kp C_VOL_DN       &kp C_VOLUME_UP  &kp LG(EQUAL)  &trans
&trans  &kp PLUS      &kp N4  &kp N5   &kp N6  &kp EQUAL    &kp LC(GRAVE)  &kp LSHFT      &kp LCTRL          &kp LALT         &kp LGUI       &trans
&trans  &kp ASTERISK  &kp N1  &kp N2   &kp N3  &kp BSLH     &kp LC(C)      &kp LC(L)      &kp LG(BACKSLASH)  &exitterm        &trans         &trans
                              &kp DOT  &kp N0  &kp MINUS    &trans         &trans         &trans
            >;
        };

        symLayer {
            bindings = <
&trans  &kp LS(LBRC)   &kp LS(AMPS)  &kp LS(STAR)           &kp LEFT_PARENTHESIS  &kp LS(RBRC)     &kp LEFT_BRACKET  &kp GRAVE         &kp NON_US_BACKSLASH  &trans            &kp RIGHT_BRACKET  &trans
&trans  &kp LS(COLON)  &kp LS(DLLR)  &kp LS(PRCNT)          &kp CARET             &kp EQUAL        &trans            &kp LSHFT         &kp LCTRL             &kp LALT          &kp LGUI           &trans
&trans  &kp TILDE      &kp LS(EXCL)  &kp LS(AT)             &kp LS(POUND)         &kp LS(PIPE)     &kp LG(N5)        &kp LG(NUMBER_1)  &kp LG(NUMBER_2)      &kp LG(NUMBER_3)  &kp LG(NUMBER_4)   &trans
                                     &kp RIGHT_PARENTHESIS  &kp MINUS             &kp LS(MINUS)    &trans            &trans            &trans
            >;
        };

        navlayer {
            bindings = <
&trans  &kp LS(LG(GRAVE))  &kp LC(LS(TAB))  &kp LC(TAB)         &kp LG(GRAVE)  &trans    &kp LS(LG(Z))  &kp LG(V)      &kp LG(C)      &kp LG(X)    &kp LG(Z)  &trans
&trans  &kp LGUI           &kp LALT         &kp LCTRL           &kp LSHFT      &trans    &kp CAPSLOCK   &kp LEFT       &kp DOWN       &kp UP       &kp RIGHT  &trans
&trans  &trans             &trans           &kp LA(LG(ESCAPE))  &kp LG(SPACE)  &trans    &kp INSERT     &kp HOME       &kp PAGE_DOWN  &kp PAGE_UP  &kp END    &trans
                                            &trans              &trans         &trans    &trans         &kp BACKSPACE  &kp DEL
            >;
        };

        funlayer {
            bindings = <
&trans       &kp F12  &kp F7  &kp F8  &kp F9         &kp LG(LS(NUMBER_4))    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans
&bt BT_CLR   &kp F11  &kp F4  &kp F5  &kp F6         &kp LG(LS(NUMBER_3))    &trans        &kp LSHFT     &kp LCTRL     &kp LALT      &kp LGUI      &trans
&bootloader  &kp F10  &kp F1  &kp F2  &kp F3         &trans                  &bootloader   &trans        &trans        &trans        &trans        &trans
                              &trans  &kp LG(LC(Q))  &kp TAB                 &trans        &trans        &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
